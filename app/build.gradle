apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        versionCode 245
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        resConfigs "en", "cs", "de", "es", "fr", "it", "nl", "pt", "ru", "sv", "tr", "uk"

        buildConfigField "String", "STORE", "\"Google Play\""
        buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""
        buildConfigField "String", "SUGGESTIONS", "\"http://www.podcatcher-deluxe.com/podcast-suggestions.v3.json\""
        buildConfigField "Boolean", "FIXED_BUNDLE", "false"
        buildConfigField "String", "BUNDLE_LANGUAGE", "\"en\""

        proguardFiles 'proguard-rules.pro'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Bring in the signing configurations, place these in a file at
    // ${USER.HOME}/.signing/pcd.gradle for this to work. You need to
    // define one config per flavor. If the property does not exist
    // or the path is not valid, only debug builds will succeed.
    if (project.hasProperty("PodcatcherDeluxe.signing")) {
        final def signingConfigs = System.getProperty("user.home") + "/" +
                project.property("PodcatcherDeluxe.signing") + ".gradle"

        if (new File(signingConfigs).exists()) {
            apply from: signingConfigs;
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"

            buildConfigField "String", "STORE", "\"Debug Store\""
        }
        play {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        amazon {
            buildConfigField "String", "STORE", "\"Amazon\""

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        slideme {
            // The SlideMe market app (SAM) also supports this link, selection
            // dialog is shown if both Google Play and SAM are installed
            buildConfigField "String", "STORE", "\"SlideMe\""

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        samsung {
            // Link to Google Play because Samsung does not allow new apps
            buildConfigField "String", "STORE", "\"Samsung\""

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        magic {
            applicationIdSuffix ".mtg"

            buildConfigField "String", "SUGGESTIONS", "\"http://www.podcatcher-deluxe.com/podcast-suggestions.magic.json\""
            buildConfigField "Boolean", "FIXED_BUNDLE", "true"

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        twit {
            applicationIdSuffix ".twit"

            buildConfigField "String", "SUGGESTIONS", "\"http://www.podcatcher-deluxe.com/podcast-suggestions.twit.json\""
            buildConfigField "Boolean", "FIXED_BUNDLE", "true"

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "media", "edition"
    productFlavors {
        final def audioSimpleSigningVariable = signingConfigs.audioSimple
        final def audioDeluxeSigningVariable = signingConfigs.audioDeluxe
        final def videoDeluxeSigningVariable = signingConfigs.videoDeluxe

        simple {
            dimension "edition"
            applicationId "net.alliknow.podcatcher"
            versionName "2016.06"

            signingConfig audioSimpleSigningVariable
        }
        deluxe {
            dimension "edition"
        }
        audio {
            dimension "media"
            applicationId "com.podcatcher.deluxe"
            versionName "2016.06"

            signingConfig audioDeluxeSigningVariable
        }
        video {
            dimension "media"
            applicationId "com.podcatcher.deluxe.video"
            versionName "2016.06"

            signingConfig videoDeluxeSigningVariable
        }
    }
    variantFilter { final variant ->
        // Ignore all variants we do not need: release and videoSimple
        if (variant.buildType.name.equals('release') ||
                (variant.flavors.get(0).name.equals('video') && variant.flavors.get(1).name.equals('simple'))) {
            variant.setIgnore(true);
        }

        // Ignore all variants we do not need: Samsung and not simple
        if (variant.buildType.name.equals('samsung') &&
                !(variant.flavors.get(0).name.equals('audio') && variant.flavors.get(1).name.equals('simple'))) {
            variant.setIgnore(true);
        }

        // Ignore all variants we do not need for Magic Podcast
        if (variant.buildType.name.equals('magic') &&
                !(variant.flavors.get(0).name.equals('audio') && variant.flavors.get(1).name.equals('deluxe'))) {
            variant.setIgnore(true);
        }

        // Ignore all variants we do not need for Twit Netcasts
        if (variant.buildType.name.equals('twit') &&
                !(variant.flavors.get(0).name.equals('video') && variant.flavors.get(1).name.equals('deluxe'))) {
            variant.setIgnore(true);
        }
    }
}

dependencies {
    // These are the libs to include:
    // 1) gpodder.net and podcare connectors (local lib modules)
    compile project(':gpodder_sync')
    compile project(':podcare_sync')
    // 2) Dropbox Sync
    compile 'com.dropbox.core:dropbox-core-sdk:2.0.3'
    // 3) Picasso (podcast logo loading)
    compile 'com.squareup.picasso:picasso:2.5.+'

    // 4) All the nice Android support stuff
    // (see http://developer.android.com/tools/support-library/features.html)
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.android.support:palette-v7:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:support-annotations:23.4.0'
}