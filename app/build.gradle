apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        versionCode 237
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        resConfigs "en", "cs", "de", "es", "fr", "it", "nl", "pt", "ru", "sv", "tr", "uk"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Bring in the signing configurations, place these in a file at
    // ${USER.HOME}/.signing/pcd.gradle for this to work. You need to
    // define one config per flavor. If the property does not exist
    // or the path is not valid, only debug builds will succeed.
    if (project.hasProperty("PodcatcherDeluxe.signing")) {
        final def signingConfigs = System.getProperty("user.home") + "/" +
                project.property("PodcatcherDeluxe.signing") + ".gradle"

        if (new File(signingConfigs).exists()) {
            apply from: signingConfigs;
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"

            buildConfigField "String", "STORE", "\"Debug Store\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""
        }
        play {
            buildConfigField "String", "STORE", "\"Google Play\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        amazon {
            buildConfigField "String", "STORE", "\"Amazon\""
            buildConfigField "String", "STORE_URL_PREFIX", "\"http://www.amazon.com/gp/mas/dl/android?p=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        slideme {
            buildConfigField "String", "STORE", "\"SlideMe\""
            // The SlideMe market app (SAM) also supports this link, selection
            // dialog is shown if both Google Play and SAM are installed
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
        samsung {
            buildConfigField "String", "STORE", "\"Samsung\""
            // Link to Google Play because Samsung does not allow new apps
            buildConfigField "String", "STORE_URL_PREFIX", "\"market://details?id=\""

            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }

    flavorDimensions "media", "edition"
    productFlavors {
        final def audioSimpleSigningVariable = signingConfigs.audioSimple
        final def audioDeluxeSigningVariable = signingConfigs.audioDeluxe
        final def videoDeluxeSigningVariable = signingConfigs.videoDeluxe

        simple {
            dimension "edition"
            applicationId "net.alliknow.podcatcher"
            versionName "2016.01a"

            signingConfig audioSimpleSigningVariable
        }
        deluxe {
            dimension "edition"
        }
        audio {
            dimension "media"
            applicationId "com.podcatcher.deluxe"
            versionName "2016.01a"

            signingConfig audioDeluxeSigningVariable
        }
        video {
            dimension "media"
            applicationId "com.podcatcher.deluxe.video"
            versionName "2016.01a"

            signingConfig videoDeluxeSigningVariable
        }
    }
    variantFilter { final variant ->
        // Ignore all variants we do not need: release and videoSimple
        if (variant.buildType.name.equals('release') ||
                (variant.flavors.get(0).name.equals('video') && variant.flavors.get(1).name.equals('simple'))) {
            variant.setIgnore(true);
        }

        // Ignore all variants we do not need: Samsung and not simple
        if (variant.buildType.name.equals('samsung') &&
                !(variant.flavors.get(0).name.equals('audio') && variant.flavors.get(1).name.equals('simple'))) {
            variant.setIgnore(true);
        }
    }
}

dependencies {
    // These are the libs to include:
    // 1) gpodder.net and podcare connectors (local lib modules)
    compile project(':gpodder_sync')
    compile project(':podcare_sync')
    // 2) Dropbox Sync
    compile files('libs/dropbox-sync-sdk-android.jar')
    // 3) Picasso (podcast logo loading)
    compile 'com.squareup.picasso:picasso:+'

    // 4) All the nice Android support stuff
    compile 'com.android.support:cardview-v7:+'
    compile 'com.android.support:recyclerview-v7:+'
    compile 'com.android.support:palette-v7:+'
    compile 'com.android.support:support-v4:+'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-annotations:+'

    // 5) Connect SDK for casting
    compile 'com.connectsdk:connect-sdk-android:+'
}